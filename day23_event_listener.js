// Level 1
// ex1
const wrapper = document.querySelector('.wrapper')
// wrapper.style.outline = '2px dashed black'
wrapper.style.width = '100%'
wrapper.style.margin = '0 auto'
wrapper.style.display = 'flex'
wrapper.style.flexDirection = 'column'
wrapper.style.alignItems = 'center'

document.querySelector('.title').style.margin = '5px'
document.querySelector('.title').style.color = 'green'
document.querySelector('.subtitle').style.margin = '5px'
document.querySelector('.author').style.margin = '5px 0 40px 0'
// document.querySelector('.imput-wrapper').style.width = '200%'

const input = document.querySelector('input')
input.style.border = '3px solid green'
input.style.width = '400px'
input.style.height = '30px'
input.style.padding = '10px'
input.style.margin = '10px'
input.style.outline = 'none'

const button = document.querySelector('button')
button.style.height = '52px'
button.style.backgroundColor = 'green'
button.style.color = 'white'
button.style.border = 'none'
button.style.padding = '15px'
button.style.cursor = 'pointer'

const isPrime = num => {        // a function for checking prime numbers
    for (let i = 2, s = Math.sqrt(num); i <= s; i++) {
        if (num % i === 0) return false
    }
    return num > 1
}
let getNumWrapper = document.querySelector('.numbers-wrapper')
let newNumWrapper = document.createElement('div')

const numGen = (count) => {
    const numsWrapper = document.createElement('div')
    let warn = document.querySelector('.warn-message')
    numsWrapper.className = 'numbers-wrapper'
    // numsWrapper.style.outline = '2px dashed black'
    numsWrapper.style.display = 'flex'
    numsWrapper.style.flexWrap = 'wrap'
    numsWrapper.style.width = '50%'
    wrapper.appendChild(numsWrapper)
    // wrapper.removeChild(document.querySelector('.warn-message'))

    for (let i = 0; i < +count + 1; i++) {
        const newNumEl = document.createElement('div')
        newNumEl.textContent = `${i}`
        newNumEl.style.width = '80px'
        newNumEl.style.height = '60px'
        // newNumEl.style.outline = '2px dashed black'
        newNumEl.style.margin = '5px'
        newNumEl.style.display = 'flex'
        newNumEl.style.alignItems = 'center'
        newNumEl.style.justifyContent = 'center'
        newNumEl.style.fontSize = '40px'

        if (i % 2) {    // for odd nums
            newNumEl.style.background = 'gold'
        } else {
            newNumEl.style.background = 'darkseagreen'
        }

        if (isPrime(i)) {   // check if the number is prime
            newNumEl.style.background = 'salmon'
        }

        if (getNumWrapper) {
            wrapper.replaceChild(newNumWrapper, getNumWrapper)
        } else {
            wrapper.appendChild(newNumWrapper)
        }

        if (warn) {
            warn.remove()
        }

        numsWrapper.appendChild(newNumEl)
    }
}


button.addEventListener('click', () => {
    const warnMess = document.createElement('div')
    let getNumWrapper = document.querySelector('.numbers-wrapper')
    let newNumWrapper = document.createElement('div')
    warnMess.className = 'warn-message'
    let warn = document.querySelector('.warn-message')
    const inputNumValue = +input.value

    if (inputNumValue === '' || typeof inputNumValue === 'string' || inputNumValue === 0) {
        input.insertAdjacentElement('beforebegin', warnMess)
        warnMess.style.color = 'red'
        warnMess.style.fontSize = '18px'
        warnMess.style.marginLeft = '10px'
        warnMess.textContent = 'Enter positive NUMBER value please üëæ'

        if (getNumWrapper) {
            wrapper.replaceChild(newNumWrapper, getNumWrapper)
        } else {
            wrapper.appendChild(newNumWrapper)
        }

        if (warn) {
            input.replaceChildren(warn, warn)
        }


    }

    if (typeof inputNumValue === 'number' && inputNumValue !== 0) {
        numGen(inputNumValue)

        if (getNumWrapper) {
            wrapper.replaceChild(newNumWrapper, getNumWrapper)
        } else {
            wrapper.appendChild(newNumWrapper)
        }
    }
})



// –¥–æ–ø —Ñ—É–Ω–∫—Ü submit –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —ç–Ω—Ç–µ—Ä
// –¥–æ —Ñ—É–Ω–∫—Ü –ø—Ä–∏ –≥–µ–Ω —Ü–∏—Ñ—Ä —Å–¥–µ–ª–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞ –¥—Ä—É–≥–∏–º –≤–∏–¥–∏–º—ã–º –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ, –Ω–æ –Ω–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ


// bugs
// 1. –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–ª–µ –∏–ª–∏ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—ë—Ç –¥–æ–ø —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ ‚úÖ
// 2. –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω ‚úÖ
// 3. –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É) ‚úÖ
// 4. –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–µ–ª –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–µ–∞–≥ –Ω–∞ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ ‚úÖ
// 5. –∫–Ω–æ–ø–∫–∞ —Ä–µ–∞–≥ –Ω–∞ 0 –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü –≥–µ–Ω —á–∏—Å–µ–ª ‚úÖ


// ex2